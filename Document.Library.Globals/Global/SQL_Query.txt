
use assignment

CREATE TABLE USERS
(
	ID UNIQUEIDENTIFIER,
	NAME NVARCHAR(50),
	EMAIL NVARCHAR(150) NOT NULL UNIQUE, --Changes here
	PASSWORD NVARCHAR(100),
	ISVERIFIED BIT DEFAULT(0),
	ISONLINE BIT DEFAULT(0),
	DATECREATED DATETIME,
	LASTACTIVE DATETIME
)

CREATE TABLE EDITOR
(
	ID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
	OWNERID UNIQUEIDENTIFIER,
	NAME NVARCHAR(50),
	DATECREATED DATETIME,
	DATEMODIFIED DATETIME,
	MODIFIEDBY UNIQUEIDENTIFIER
)
INSERT INTO EDITOR(OWNERID, NAME, DATECREATED, DATEMODIFIED, MODIFIEDBY) VALUES(NEWID(), 'SHIVAM', GETUTCDATE(), GETUTCDATE(), NEWID())


CREATE TABLE READERDATA
(
	ID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
	ORDINAL INT,
	EDITORID INT FOREIGN KEY REFERENCES EDITOR(ID),
	LENGTH INT,
	CHARACTERS NVARCHAR(1000)
)

CREATE TABLE ATTRIBUTOR
(
	READERDATAID INT FOREIGN KEY REFERENCES READERDATA(ID),
	HEADER TINYINT,
	LINK NVARCHAR(100),
	ITALIC BIT,
	UNDERLINE BIT,
	STRIKE BIT,
	BOLD BIT,
	IMAGE NVARCHAR(100)  
)

--CREATE NON CLUSTERED KEY ON ROWID


CREATE TABLE VISITORSLOG
(
	ID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	EDITORID INT FOREIGN KEY REFERENCES EDITOR(ID),
	USERID UNIQUEIDENTIFIER,
	LASTVISITED DATETIME
)



CREATE TABLE SHARINGINFOFORINTERNALUSER
(
	OBJECTID INT,
	SHAREDUSERID UNIQUEIDENTIFIER,
	PERMISSIONTYPE TINYINT,
	TIMESTAMP DATETIME
)


CREATE TABLE SHARINGINFOFOREXTERNALUSER --LOGIC on creating NEW ACCOUNT
(
	OBJECTID INT,
	PERMISSIONTYPE TINYINT,
	TIMESTAMP DATETIME,
	EMAIL NVARCHAR(250)
)

CREATE TYPE [ReaderDataTableType] AS TABLE(
	Ordinal INT NOT NULL,
	EditorId INT NOT NULL,
	LENGTH INT NOT NULL,
	CHARACTERS NVARCHAR(250) NULL
)

CREATE TYPE [IdAsIntArrayTableType] AS TABLE(
	Id INT
)

CREATE PROCEDURE SHAREOBJECT
@email NVARCHAR(50),
@editorId INT,
@permissionType TINYINT
AS
BEGIN
	DECLARE @userId UNIQUEIDENTIFIER
	SELECT @userId = [ID] FROM [USERS] WHERE EMAIL = @email

	IF(@userId IS NULL)
	BEGIN
		INSERT INTO 
			[SHARINGINFOFOREXTERNALUSER]
			(
			[OBJECTID], 
			[PERMISSIONTYPE], 
			[TIMESTAMP],
			[EMAIL]
			)
		VALUES
		(
			@editorId,
			@permissionType,
			GETUTCDATE(),
			@email
		)
	END
	ELSE
	BEGIN
		INSERT INTO 
			[SHARINGINFOFORINTERNALUSER]
			(
			[OBJECTID], 
			[SHAREDUSERID], 
			[PERMISSIONTYPE], 
			[TIMESTAMP]
			)
		VALUES
		(
			@editorId,
			@userId,
			@permissionType,
			GETUTCDATE() 
		)
	END
END
GO



CREATE PROCEDURE UpdateEditorData
@valuesDataTable [ReaderDataTableType] READONLY
AS
BEGIN
		INSERT 
		INTO 
			READERDATA(ORDINAL, EDITORID, LENGTH, CHARACTERS) 
		SELECT	
			ORDINAL, EDITORID, LENGTH, CHARACTERS 
		FROM 
			@valuesDataTable

END
GO


ALTER PROCEDURE GetReaderDataByRetainValue
@editorId INT,
@retain INT
AS
BEGIN
	SELECT TOP 1
		RD.ID,
		RD.EditorId,
		RD.Ordinal,
		RD.Length,
		RD.Characters AS VALUE
	FROM 
		READERDATA RD
	WHERE 
		RD.EditorId = @editorId AND RD.Length >= @retain
	ORDER BY
		RD.Ordinal
END
GO



ALTER PROCEDURE UpdateDataOrdinal
@count INT,
@dataLength INT,
@editorId INT,
@retain INT
AS
BEGIN
	UPDATE
		READERDATA
	SET
		ORDINAL = ORDINAL + @count,
		LENGTH = @dataLength + LEN(Characters)
	WHERE
		EditorId = @editorId AND LENGTH > @retain
		
END
GO


CREATE PROCEDURE DeleteDataById
@ids [IdAsIntArrayTableType] READONLY
AS
BEGIN
	DELETE RD FROM 
		READERDATA RD
	JOIN
		@ids I
	ON
		I.ID = RD.ID
END
GO



CREATE PROCEDURE UpdateDataById
@id INT,	
@ordinal INT,
@characters NVARCHAR(250),
@dataLength INT
AS
BEGIN
	UPDATE 
		READERDATA 
	SET 
		ORDINAL = @ordinal, LENGTH = @dataLength, CHARACTERS = @characters
	WHERE
		ID = @id
END
GO

CREATE PROCEDURE DeleteDataById
@index INT,
@editorId INT,
@retain INT = NULL
AS
BEGIN
	DECLARE @dataArray VARCHAR(MAX)

	SELECT TOP 1 
		@dataArray = LENGTH - LEN(CHARACTERS)
	FROM 
		READERDATA RD
	WHERE 
		RD.EditorId = @editorId AND RD.Length >= @retain
	ORDER BY
		RD.Ordinal
	
	DELETE RD 
	FROM 
		READERDATA RD
	WHERE 
		

		

	DECLARE @startIndex INT
	SELECT 
		@dataArray = COALESCE(@dataArray + '\n' + CHARACTERS, CHARACTERS) 
	FROM 
		READERDATA 
	WHERE 
		LENGTH >= @index 
		AND 
		LENGTH <= (@index + @retain) 
		AND 
		EDITORID = @editorId 
	ORDER BY 
		ORDINAL

	SELECT @startIndex =  LEFT(@dataArray, charindex('\n', @dataArray) - 1)

END
GO




CREATE PROCEDURE GetUserProfileByEmail
@email NVARCHAR(50)
AS
BEGIN
	SELECT 
		ID,
		NAME,
		EMAIL,
		PASSWORD,
		ISVERIFIED,
		ISONLINE,
		DATECREATED,
		LASTACTIVE
	FROM
		USERS
	WHERE 
		EMAIL = @email
END
GO


CREATE PROCEDURE GetUserProfileById
@id UNIQUEIDENTIFIER
AS
BEGIN
	SELECT 
		ID,
		NAME,
		EMAIL,
		PASSWORD,
		ISVERIFIED,
		ISONLINE,
		DATECREATED,
		LASTACTIVE
	FROM
		USERS
	WHERE 
		ID = @id
END
GO


CREATE PROCEDURE RemoveUserSession
@sessionId UNIQUEIDENTIFIER
AS
BEGIN
	DELETE FROM USERSESSIONS WHERE ID = @sessionId
END
GO


CREATE TABLE USERSESSIONS
(
	ID UNIQUEIDENTIFIER NOT NULL,
	USERID UNIQUEIDENTIFIER NOT NULL FOREIGN KEY REFERENCES USERS(ID),
	LASTACCESS DATETIME NOT NULL,
	ISPERSISTENT BIT NOT NULL DEFAULT(0),
	ACCESSTOKEN NVARCHAR(MAX) NULL,
	ACCESSTOKENEXPIRY DATETIME NULL,
	LASTCHECKACCESSTOKEN DATETIME NULL
)


CREATE PROCEDURE SetUserSession
@userId UNIQUEIDENTIFIER,
@sessionId UNIQUEIDENTIFIER,
@lastAccess DATETIME,
@isPersistent BIT,
@accessToken NVARCHAR(MAX) = NULL,
@accessTokenExpiry DATETIME = NULL,
@lastCheckAccessToken DATETIME = NULL
AS
BEGIN
	DELETE FROM USERSESSIONS WHERE USERID = @userId

	INSERT INTO 
		USERSESSIONS(ID, USERID, LASTACCESS, ISPERSISTENT, ACCESSTOKEN, ACCESSTOKENEXPIRY, LASTCHECKACCESSTOKEN)
	VALUES
		(@sessionId, @userId, @lastAccess, @isPersistent, @accessToken, @accessTokenExpiry, @lastCheckAccessToken)
		
	
END
GO



CREATE PROCEDURE GetUserSession
@sessionId UNIQUEIDENTIFIER
AS
BEGIN
	SELECT 
		US.EMAIL  AS EMAIL,
		ID ,
		USERID ,
		LASTACCESS ,
		ISPERSISTENT ,
		ACCESSTOKEN ,
		ACCESSTOKENEXPIRY ,
		LASTCHECKACCESSTOKEN 
	FROM
		USERSESSIONS URS
	JOIN
		USERS US
	ON
		URS.USERID = US.ID
	WHERE
		ID = @sessionId
	
END
GO



CREATE PROCEDURE UpdateUserSession
@userId UNIQUEIDENTIFIER,
@sessionId UNIQUEIDENTIFIER,
@accessToken NVARCHAR(MAX) = NULL,
@accessTokenExpiry DATETIME = NULL,
@lastCheckAccessToken DATETIME = NULL 
AS
BEGIN
	UPDATE 
		USERSESSIONS
	SET
		ACCESSTOKEN = @accessToken, 
		ACCESSTOKENEXPIRY =@accessTokenExpiry, 
		LASTCHECKACCESSTOKEN = @lastCheckAccessToken
	WHERE
		ID = @sessionId AND USERID = @userId
	
	
END
GO


CREATE PROCEDURE SlideUserSessionExpiration
@sessionId UNIQUEIDENTIFIER,
@newExpirationTime DATETIME,
@lastCheckAccessToken DATETIME = NULL
AS
BEGIN
	UPDATE 
		USERSESSIONS
	SET
		LASTACCESS = @newExpirationTime, 
		LASTCHECKACCESSTOKEN = @lastCheckAccessToken
	WHERE
		ID = @sessionId
		
	IF @@ROWCOUNT = 0
		THROW 51000, 'SESSION NOT FOUND', 1
	 
	
END
GO


ALTER PROCEDURE GetFileByUserId
@userId UNIQUEIDENTIFIER
AS
BEGIN
	SELECT 
		E.ID AS ID,
		E.OWNERID AS OWNERID,
		E.NAME AS NAME,
		E.DATECREATED AS DATECREATED,
		E.DATEMODIFIED AS DATEMODIFIED,
		E.MODIFIEDBY AS MODIFIEDBY,
		CASE WHEN 
				SI.PERMISSIONTYPE IS NULL 
			THEN 
				3
			ELSE 
				PERMISSIONTYPE END 
		AS PERMISSION
	FROM
		EDITOR E
	LEFT JOIN
		SHARINGINFOFORINTERNALUSER SI
	ON
		SI.SHAREDUSERID = E.OWNERID
	WHERE
		OWNERID = @userId
	
END
GO


CREATE PROCEDURE CreateNewEditor
@name NVARCHAR(50),
@userId UNIQUEIDENTIFIER
AS
BEGIN
	INSERT INTO 
		EDITOR(OWNERID, NAME, DATECREATED) 
	VALUES
		(@userId, @name, GETUTCDATE())
				
	SELECT 
		ID,
		OWNERID,
		NAME,
		DATECREATED,
		DATEMODIFIED,
		MODIFIEDBY,
		'FULL' AS PERMISSION
	FROM
		EDITOR
	WHERE
		OWNERID = @userId AND ID = SCOPE_IDENTITY()
	
END
GO


ALTER PROCEDURE DeleteDataFromFirst
@length INT,
@editorId INT
AS 
BEGIN

	DECLARE @id INT
	SELECT TOP 1 @id = ID FROM READERDATA WHERE LENGTH >=  @length AND EDITORID = @editorId ORDER BY ORDINAL
	
	DELETE FROM 
		READERDATA 
	WHERE 
		ID < @id 
	AND 
		EDITORID = @editorId

	UPDATE 
		READERDATA 
	SET 
		CHARACTERS = (SELECT SUBSTRING(CHARACTERS, ((@length + 1) - ((LENGTH - 1) - LEN(CHARACTERS))), LENGTH - @length )
						FROM READERDATA WHERE ID = @id),
		LENGTH = LENGTH - @length
	WHERE
		ID = @id
		
		
	UPDATE 
		READERDATA
	SET 
		LENGTH = LENGTH - @length
	WHERE
		ID > @id AND EDITORID = @editorId
		

END
GO


ALTER PROCEDURE GetDataByEditorId
@userId UNIQUEIDENTIFIER,
@editorId INT
AS
BEGIN
	SELECT 
		RD.ID AS ID,
		RD.[EDITORID] AS EDITORID,
		RD.[ORDINAL] AS ORDINAL,
		RD.[LENGTH] AS LENGTH,
		RD.[CHARACTERS] AS VALUE,
		RD.ATTRIBUTES AS AttributorSettings
	FROM 
		EDITOR E
	JOIN
		READERDATA RD
	ON	
		E.ID = RD.EDITORID
	WHERE
		E.OWNERID = @userId AND E.ID = @editorId
	ORDER BY
		RD.[ORDINAL]

END
GO





ALTER PROCEDURE GetAttributorDataByReaderId
@editorId INT
AS
BEGIN
	SELECT 
		ATR.READERDATAID AS READERDATAID,
		ATR.HEADER AS HEADER,
		ATR.LINK AS LINK,
		ATR.ITALIC AS ITALIC,
		ATR.UNDERLINE AS UNDERLINE,
		ATR.STRIKE AS STRIKE,
		ATR.BOLD AS BOLD,
		ATR.IMAGE AS IMAGE,
		ATR.STARTINDEX AS START,
		ATR.LENGTH AS LENGTH
	FROM 
		READERDATA RD
	JOIN
		[ATTRIBUTOR] ATR
	ON	
		RD.ID = ATR.[READERDATAID]
	WHERE
		RD.[EDITORID] = @editorId
	ORDER BY 
		RD.ORDINAL
END
GO


ALTER TABLE ATTRIBUTOR ADD STARTINDEX INT
ALTER TABLE ATTRIBUTOR ADD LENGTH INT






-- 25th April 2018--------------
ALTER TABLE READERDATA ADD 	HEADER NVARCHAR(300),
	LINK NVARCHAR(300),
	ITALIC NVARCHAR(300),
	UNDERLINE NVARCHAR(300),
	STRIKE NVARCHAR(300),
	BOLD NVARCHAR(300),
	IMAGE NVARCHAR(300)  



ALTER TABLE READERDATA DROP COLUMN HEADER, LINK, ITALIC, UNDERLINE, STRIKE, BOLD, IMAGE


ALTER TABLE READERDATA ADD 	ATTRIBUTES NVARCHAR(1000)



//--------------------------SQL DATA BACKUP-----------------------------------------------------------------------------------



CREATE TABLE [dbo].[ATTRIBUTOR](
	[READERDATAID] [int] NULL,
	[HEADER] [tinyint] NULL,
	[LINK] [nvarchar](100) NULL,
	[ITALIC] [bit] NULL,
	[UNDERLINE] [bit] NULL,
	[STRIKE] [bit] NULL,
	[BOLD] [bit] NULL,
	[IMAGE] [nvarchar](100) NULL,
	[STARTINDEX] [int] NULL,
	[LENGTH] [int] NULL
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ATTRIBUTOR]  WITH CHECK ADD FOREIGN KEY([READERDATAID])
REFERENCES [dbo].[READERDATA] ([ID])
GO



CREATE TABLE [dbo].[EDITOR](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[OWNERID] [uniqueidentifier] NULL,
	[NAME] [nvarchar](50) NULL,
	[DATECREATED] [datetime] NULL,
	[DATEMODIFIED] [datetime] NULL,
	[MODIFIEDBY] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO



CREATE TABLE [dbo].[READERDATA](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ORDINAL] [int] NULL,
	[EDITORID] [int] NULL,
	[LENGTH] [int] NULL,
	[CHARACTERS] [nvarchar](250) NULL,
	[ATTRIBUTES] [nvarchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[READERDATA]  WITH CHECK ADD FOREIGN KEY([EDITORID])
REFERENCES [dbo].[EDITOR] ([ID])
GO



CREATE TABLE [dbo].[SHARINGINFOFOREXTERNALUSER](
	[OBJECTID] [int] NULL,
	[PERMISSIONTYPE] [tinyint] NULL,
	[TIMESTAMP] [datetime] NULL,
	[EMAIL] [nvarchar](250) NULL
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[SHARINGINFOFORINTERNALUSER](
	[OBJECTID] [int] NULL,
	[SHAREDUSERID] [uniqueidentifier] NULL,
	[PERMISSIONTYPE] [tinyint] NULL,
	[TIMESTAMP] [datetime] NULL
) ON [PRIMARY]
GO





CREATE TABLE [dbo].[USERS](
	[ID] [uniqueidentifier] NULL,
	[NAME] [nvarchar](50) NULL,
	[EMAIL] [nvarchar](150) NOT NULL,
	[PASSWORD] [nvarchar](100) NULL,
	[ISVERIFIED] [bit] NULL,
	[ISONLINE] [bit] NULL,
	[DATECREATED] [datetime] NULL,
	[LASTACTIVE] [datetime] NULL,
UNIQUE NONCLUSTERED 
(
	[EMAIL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[USERS] ADD  DEFAULT ((0)) FOR [ISVERIFIED]
GO

ALTER TABLE [dbo].[USERS] ADD  DEFAULT ((0)) FOR [ISONLINE]
GO




CREATE TABLE [dbo].[USERSESSIONS](
	[ID] [uniqueidentifier] NOT NULL,
	[USERID] [uniqueidentifier] NOT NULL,
	[LASTACCESS] [datetime] NOT NULL,
	[ISPERSISTENT] [bit] NOT NULL,
	[ACCESSTOKEN] [nvarchar](max) NULL,
	[ACCESSTOKENEXPIRY] [datetime] NULL,
	[LASTCHECKACCESSTOKEN] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[USERSESSIONS] ADD  DEFAULT ((0)) FOR [ISPERSISTENT]
GO



CREATE TABLE [dbo].[VISITORSLOG](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[EDITORID] [int] NULL,
	[USERID] [uniqueidentifier] NULL,
	[LASTVISITED] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[VISITORSLOG]  WITH CHECK ADD FOREIGN KEY([EDITORID])
REFERENCES [dbo].[EDITOR] ([ID])
GO

---------------------------------------------------------SPs ---------------------------
  
CREATE PROCEDURE CreateNewEditor  
@name NVARCHAR(50),  
@userId UNIQUEIDENTIFIER  
AS  
BEGIN  
 INSERT INTO   
  EDITOR(OWNERID, NAME, DATECREATED)   
 VALUES  
  (@userId, @name, GETUTCDATE())  
      
 SELECT   
  ID,  
  OWNERID,  
  NAME,  
  DATECREATED,  
  DATEMODIFIED,  
  MODIFIEDBY,  
  'FULL' AS PERMISSION  
 FROM  
  EDITOR  
 WHERE  
  OWNERID = @userId AND ID = SCOPE_IDENTITY()  
   
END  



CREATE PROCEDURE DeleteDataById  
@ids [IdAsIntArrayTableType] READONLY  
AS  
BEGIN  
 DELETE RD FROM   
  READERDATA RD  
 JOIN  
  @ids I  
 ON  
  I.ID = RD.ID  
END  




  
  
CREATE PROCEDURE DeleteDataFromFirst  
@length INT,  
@editorId INT  
AS   
BEGIN  
  
 DECLARE @id INT  
 SELECT TOP 1 @id = ID FROM READERDATA WHERE LENGTH >=  @length AND EDITORID = @editorId ORDER BY ORDINAL  
   
 DELETE FROM   
  READERDATA   
 WHERE   
  ID < @id   
 AND   
  EDITORID = @editorId  
  
 UPDATE   
  READERDATA   
 SET   
  CHARACTERS = (SELECT SUBSTRING(CHARACTERS, ((@length + 1) - ((LENGTH - 1) - LEN(CHARACTERS))), LENGTH - @length )  
      FROM READERDATA WHERE ID = @id),  
  LENGTH = LENGTH - @length  
 WHERE  
  ID = @id  
    
    
 UPDATE   
  READERDATA  
 SET   
  LENGTH = LENGTH - @length  
 WHERE  
  ID > @id AND EDITORID = @editorId  
  
END  



  
CREATE PROCEDURE GetAttributorDataByReaderId  
@editorId INT  
AS  
BEGIN  
 SELECT   
  ATR.READERDATAID AS READERDATAID,  
  ATR.HEADER AS HEADER,  
  ATR.LINK AS LINK,  
  ATR.ITALIC AS ITALIC,  
  ATR.UNDERLINE AS UNDERLINE,  
  ATR.STRIKE AS STRIKE,  
  ATR.BOLD AS BOLD,  
  ATR.IMAGE AS IMAGE,  
  ATR.STARTINDEX AS START,  
  ATR.LENGTH AS LENGTH  
 FROM   
  READERDATA RD  
 JOIN  
  [ATTRIBUTOR] ATR  
 ON   
  RD.ID = ATR.[READERDATAID]  
 WHERE  
  RD.[EDITORID] = @editorId  
 ORDER BY   
  RD.ORDINAL  
END  




  
CREATE PROCEDURE GetDataByEditorId  
@userId UNIQUEIDENTIFIER,  
@editorId INT  
AS  
BEGIN  
 SELECT   
  RD.ID AS ID,  
  RD.[EDITORID] AS EDITORID,  
  RD.[ORDINAL] AS ORDINAL,  
  RD.[LENGTH] AS LENGTH,  
  RD.[CHARACTERS] AS VALUE,  
  RD.ATTRIBUTES AS AttributorSettings  
 FROM   
  EDITOR E  
 JOIN  
  READERDATA RD  
 ON   
  E.ID = RD.EDITORID  
 WHERE  
  E.OWNERID = @userId AND E.ID = @editorId  
 ORDER BY  
  RD.[ORDINAL]  
  
END  


CREATE PROCEDURE GetFileByUserId   
@userId UNIQUEIDENTIFIER  
AS  
BEGIN  
 SELECT   
  E.ID AS ID,  
  E.OWNERID AS OWNERID,  
  E.NAME AS NAME,  
  E.DATECREATED AS DATECREATED,  
  E.DATEMODIFIED AS DATEMODIFIED,  
  E.MODIFIEDBY AS MODIFIEDBY,  
  CASE WHEN   
    SI.PERMISSIONTYPE IS NULL   
   THEN   
    3  
   ELSE   
    PERMISSIONTYPE END   
  AS PERMISSION  
 FROM  
  EDITOR E  
 LEFT JOIN  
  SHARINGINFOFORINTERNALUSER SI  
 ON  
  SI.SHAREDUSERID = E.OWNERID  
 WHERE  
  OWNERID = @userId  
   
END  


  
CREATE PROCEDURE GetReaderDataByRetainValue  
@editorId INT,  
@retain INT  
AS  
BEGIN  
 SELECT TOP 1  
  RD.ID,  
  RD.EditorId,  
  RD.Ordinal,  
  RD.Length,  
  RD.Characters AS VALUE  
 FROM   
  READERDATA RD  
 WHERE   
  RD.EditorId = @editorId AND RD.Length >= @retain  
 ORDER BY  
  RD.Ordinal  
END  



  
CREATE PROCEDURE GetUserProfileByEmail  
@email NVARCHAR(50)  
AS  
BEGIN  
 SELECT   
  ID,  
  NAME,  
  EMAIL,  
  PASSWORD,  
  ISVERIFIED AS HasVerifiedEmail,  
  ISONLINE,  
  DATECREATED,  
  LASTACTIVE  
 FROM  
  USERS  
 WHERE   
  EMAIL = @email  
END  


CREATE PROCEDURE GetUserProfileById  
@id UNIQUEIDENTIFIER  
AS  
BEGIN  
 SELECT   
  ID,  
  NAME,  
  EMAIL,  
  PASSWORD,  
  ISVERIFIED,  
  ISONLINE,  
  DATECREATED,  
  LASTACTIVE  
 FROM  
  USERS  
 WHERE   
  ID = @id  
END  


  
CREATE PROCEDURE GetUserSession  
@sessionId UNIQUEIDENTIFIER  
AS  
BEGIN  
 SELECT   
  US.EMAIL  AS EMAIL,  
  URS.ID ,  
  URS.USERID ,  
  URS.LASTACCESS ,  
  URS.ISPERSISTENT ,  
  URS.ACCESSTOKEN ,  
  URS.ACCESSTOKENEXPIRY ,  
  URS.LASTCHECKACCESSTOKEN   
 FROM  
  USERSESSIONS URS  
 JOIN  
  USERS US  
 ON  
  URS.USERID = US.ID  
 WHERE  
  URS.ID = @sessionId  
   
END  


CREATE PROCEDURE RemoveUserSession  
@sessionId UNIQUEIDENTIFIER  
AS  
BEGIN  
 DELETE FROM USERSESSIONS WHERE ID = @sessionId  
END  


  
CREATE PROCEDURE SetUserSession  
@userId UNIQUEIDENTIFIER,  
@sessionId UNIQUEIDENTIFIER,  
@lastAccess DATETIME,  
@isPersistent BIT,  
@accessToken NVARCHAR(MAX) = NULL,  
@accessTokenExpiry DATETIME = NULL,  
@lastCheckAccessToken DATETIME = NULL  
AS  
BEGIN  
 DELETE FROM USERSESSIONS WHERE USERID = @userId  
  
 INSERT INTO   
  USERSESSIONS(ID, USERID, LASTACCESS, ISPERSISTENT, ACCESSTOKEN, ACCESSTOKENEXPIRY, LASTCHECKACCESSTOKEN)  
 VALUES  
  (@sessionId, @userId, @lastAccess, @isPersistent, @accessToken, @accessTokenExpiry, @lastCheckAccessToken)  
    
   
END  


CREATE PROCEDURE SHAREOBJECT  
@email NVARCHAR(50),  
@editorId INT,  
@permissionType TINYINT  
AS  
BEGIN  
 DECLARE @userId UNIQUEIDENTIFIER  
 SELECT @userId = [ID] FROM [USERS] WHERE EMAIL = @email  
  
 IF(@userId IS NULL)  
 BEGIN  
  INSERT INTO   
   [SHARINGINFOFOREXTERNALUSER]  
   (  
   [OBJECTID],   
   [PERMISSIONTYPE],   
   [TIMESTAMP],  
   [EMAIL]  
   )  
  VALUES  
  (  
   @editorId,  
   @permissionType,  
   GETUTCDATE(),  
   @email  
  )  
 END  
 ELSE  
 BEGIN  
  INSERT INTO   
   [SHARINGINFOFORINTERNALUSER]  
   (  
   [OBJECTID],   
   [SHAREDUSERID],   
   [PERMISSIONTYPE],   
   [TIMESTAMP]  
   )  
  VALUES  
  (  
   @editorId,  
   @userId,  
   @permissionType,  
   GETUTCDATE()   
  )  
 END  
END  


  
CREATE PROCEDURE SlideUserSessionExpiration  
@sessionId UNIQUEIDENTIFIER,  
@newExpirationTime DATETIME,  
@lastCheckAccessToken DATETIME = NULL  
AS  
BEGIN  
 UPDATE   
  USERSESSIONS  
 SET  
  LASTACCESS = @newExpirationTime,   
  LASTCHECKACCESSTOKEN = @lastCheckAccessToken  
 WHERE  
  ID = @sessionId  
    
 IF @@ROWCOUNT = 0  
  THROW 51000, 'SESSION NOT FOUND', 1  
    
   
END  



CREATE PROCEDURE UpdateDataById  
@id INT,  
@ordinal INT,  
@characters NVARCHAR(250),  
@dataLength INT  
AS  
BEGIN  
 UPDATE   
  READERDATA   
 SET   
  ORDINAL = @ordinal, LENGTH = @dataLength, CHARACTERS = @characters  
 WHERE  
  ID = @id  
END  



CREATE PROCEDURE UpdateDataOrdinal  
@count INT,  
@dataLength INT,  
@editorId INT,  
@retain INT  
AS  
BEGIN  
 UPDATE  
  READERDATA  
 SET  
  ORDINAL = ORDINAL + @count,  
  LENGTH = @dataLength + LEN(Characters)  
 WHERE  
  EditorId = @editorId AND LENGTH > @retain  
    
END  


CREATE PROCEDURE UpdateEditorData  
@valuesDataTable [ReaderDataTableType] READONLY  
AS  
BEGIN  
  INSERT   
  INTO   
   READERDATA(ORDINAL, EDITORID, LENGTH, CHARACTERS)   
  SELECT   
   ORDINAL, EDITORID, LENGTH, CHARACTERS   
  FROM   
   @valuesDataTable  
END  


  
CREATE PROCEDURE UpdateUserSession  
@userId UNIQUEIDENTIFIER,  
@sessionId UNIQUEIDENTIFIER,  
@accessToken NVARCHAR(MAX) = NULL,  
@accessTokenExpiry DATETIME = NULL,  
@lastCheckAccessToken DATETIME = NULL   
AS  
BEGIN  
 UPDATE   
  USERSESSIONS  
 SET  
  ACCESSTOKEN = @accessToken,   
  ACCESSTOKENEXPIRY =@accessTokenExpiry,   
  LASTCHECKACCESSTOKEN = @lastCheckAccessToken  
 WHERE  
  ID = @sessionId AND USERID = @userId  
   
   
END  